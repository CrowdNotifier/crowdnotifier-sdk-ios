// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Protobufs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct QRCodePayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var locationData: TraceLocation {
    get {return _locationData ?? TraceLocation()}
    set {_locationData = newValue}
  }
  /// Returns true if `locationData` has been explicitly set.
  public var hasLocationData: Bool {return self._locationData != nil}
  /// Clears the value of `locationData`. Subsequent reads from it will return its default value.
  public mutating func clearLocationData() {self._locationData = nil}

  public var crowdNotifierData: CrowdNotifierData {
    get {return _crowdNotifierData ?? CrowdNotifierData()}
    set {_crowdNotifierData = newValue}
  }
  /// Returns true if `crowdNotifierData` has been explicitly set.
  public var hasCrowdNotifierData: Bool {return self._crowdNotifierData != nil}
  /// Clears the value of `crowdNotifierData`. Subsequent reads from it will return its default value.
  public mutating func clearCrowdNotifierData() {self._crowdNotifierData = nil}

  public var countryData: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _locationData: TraceLocation? = nil
  fileprivate var _crowdNotifierData: CrowdNotifierData? = nil
}

public struct TraceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var description_p: String = String()

  public var address: String = String()

  /// UNIX timestamp in seconds
  public var startTimestamp: UInt64 = 0

  /// UNIX timestamp in seconds
  public var endTimestamp: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct CrowdNotifierData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var publicKey: Data = Data()

  public var cryptographicSeed: Data = Data()

  public var type: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProblematicEventWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Int32 = 0

  public var events: [ProblematicEvent] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct ProblematicEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Int32 = 0

  public var identity: Data = Data()

  public var secretKeyForIdentity: Data = Data()

  /// UNIX timestamp in seconds
  public var day: Int64 = 0

  public var encryptedAssociatedData: Data = Data()

  public var cipherTextNonce: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct AssociatedData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: Int32 = 0

  public var message: String = String()

  /// UNIX timestamp in seconds
  public var startTimestamp: Int64 = 0

  /// UNIX timestamp in seconds
  public var endTimestamp: Int64 = 0

  public var countryData: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension QRCodePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "QRCodePayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "locationData"),
    3: .same(proto: "crowdNotifierData"),
    4: .same(proto: "countryData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._locationData) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._crowdNotifierData) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.countryData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._locationData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._crowdNotifierData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.countryData.isEmpty {
      try visitor.visitSingularBytesField(value: self.countryData, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: QRCodePayload, rhs: QRCodePayload) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._locationData != rhs._locationData {return false}
    if lhs._crowdNotifierData != rhs._crowdNotifierData {return false}
    if lhs.countryData != rhs.countryData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TraceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "TraceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "description"),
    3: .same(proto: "address"),
    4: .same(proto: "startTimestamp"),
    5: .same(proto: "endTimestamp"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.startTimestamp) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.endTimestamp) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.startTimestamp, fieldNumber: 4)
    }
    if self.endTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.endTimestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: TraceLocation, rhs: TraceLocation) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.address != rhs.address {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.endTimestamp != rhs.endTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CrowdNotifierData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CrowdNotifierData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "publicKey"),
    3: .same(proto: "cryptographicSeed"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.cryptographicSeed) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    if !self.cryptographicSeed.isEmpty {
      try visitor.visitSingularBytesField(value: self.cryptographicSeed, fieldNumber: 3)
    }
    if self.type != 0 {
      try visitor.visitSingularUInt32Field(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CrowdNotifierData, rhs: CrowdNotifierData) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.cryptographicSeed != rhs.cryptographicSeed {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProblematicEventWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProblematicEventWrapper"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "events"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProblematicEventWrapper, rhs: ProblematicEventWrapper) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ProblematicEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ProblematicEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "identity"),
    3: .same(proto: "secretKeyForIdentity"),
    4: .same(proto: "day"),
    5: .same(proto: "encryptedAssociatedData"),
    6: .same(proto: "cipherTextNonce"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.identity) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.secretKeyForIdentity) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.day) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.encryptedAssociatedData) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.cipherTextNonce) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularBytesField(value: self.identity, fieldNumber: 2)
    }
    if !self.secretKeyForIdentity.isEmpty {
      try visitor.visitSingularBytesField(value: self.secretKeyForIdentity, fieldNumber: 3)
    }
    if self.day != 0 {
      try visitor.visitSingularInt64Field(value: self.day, fieldNumber: 4)
    }
    if !self.encryptedAssociatedData.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptedAssociatedData, fieldNumber: 5)
    }
    if !self.cipherTextNonce.isEmpty {
      try visitor.visitSingularBytesField(value: self.cipherTextNonce, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ProblematicEvent, rhs: ProblematicEvent) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.identity != rhs.identity {return false}
    if lhs.secretKeyForIdentity != rhs.secretKeyForIdentity {return false}
    if lhs.day != rhs.day {return false}
    if lhs.encryptedAssociatedData != rhs.encryptedAssociatedData {return false}
    if lhs.cipherTextNonce != rhs.cipherTextNonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AssociatedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "AssociatedData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "message"),
    3: .same(proto: "startTimestamp"),
    4: .same(proto: "endTimestamp"),
    5: .same(proto: "countryData"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.startTimestamp) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.endTimestamp) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.countryData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.startTimestamp, fieldNumber: 3)
    }
    if self.endTimestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.endTimestamp, fieldNumber: 4)
    }
    if !self.countryData.isEmpty {
      try visitor.visitSingularBytesField(value: self.countryData, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AssociatedData, rhs: AssociatedData) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.message != rhs.message {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.endTimestamp != rhs.endTimestamp {return false}
    if lhs.countryData != rhs.countryData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
