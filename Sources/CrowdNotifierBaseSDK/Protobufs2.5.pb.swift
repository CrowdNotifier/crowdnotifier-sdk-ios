// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Protobufs2.5.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct QRCodePayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var locationData: TraceLocation {
    get {return _locationData ?? TraceLocation()}
    set {_locationData = newValue}
  }
  /// Returns true if `locationData` has been explicitly set.
  var hasLocationData: Bool {return self._locationData != nil}
  /// Clears the value of `locationData`. Subsequent reads from it will return its default value.
  mutating func clearLocationData() {self._locationData = nil}

  var crowdNotifierData: CrowdNotifierData {
    get {return _crowdNotifierData ?? CrowdNotifierData()}
    set {_crowdNotifierData = newValue}
  }
  /// Returns true if `crowdNotifierData` has been explicitly set.
  var hasCrowdNotifierData: Bool {return self._crowdNotifierData != nil}
  /// Clears the value of `crowdNotifierData`. Subsequent reads from it will return its default value.
  mutating func clearCrowdNotifierData() {self._crowdNotifierData = nil}

  var countryData: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _locationData: TraceLocation? = nil
  fileprivate var _crowdNotifierData: CrowdNotifierData? = nil
}

struct TraceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var description_p: String = String()

  var address: String = String()

  var startTimestamp: UInt64 = 0

  var endTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct CrowdNotifierData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var publicKey: Data = Data()

  var cryptographicSeed: Data = Data()

  var type: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct NMLocationData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var type: NMLocationData.VenueType = .other

  var room: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum VenueType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case other // = 0
    case meetingRoom // = 1
    case cafeteria // = 2
    case privateEvent // = 3
    case canteen // = 4
    case library // = 5
    case lectureRoom // = 6
    case shop // = 7
    case gym // = 8
    case kitchenArea // = 9
    case officeSpace // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .other
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .other
      case 1: self = .meetingRoom
      case 2: self = .cafeteria
      case 3: self = .privateEvent
      case 4: self = .canteen
      case 5: self = .library
      case 6: self = .lectureRoom
      case 7: self = .shop
      case 8: self = .gym
      case 9: self = .kitchenArea
      case 10: self = .officeSpace
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .other: return 0
      case .meetingRoom: return 1
      case .cafeteria: return 2
      case .privateEvent: return 3
      case .canteen: return 4
      case .library: return 5
      case .lectureRoom: return 6
      case .shop: return 7
      case .gym: return 8
      case .kitchenArea: return 9
      case .officeSpace: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension NMLocationData.VenueType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [NMLocationData.VenueType] = [
    .other,
    .meetingRoom,
    .cafeteria,
    .privateEvent,
    .canteen,
    .library,
    .lectureRoom,
    .shop,
    .gym,
    .kitchenArea,
    .officeSpace,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension QRCodePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QRCodePayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "locationData"),
    3: .same(proto: "crowdNotifierData"),
    4: .same(proto: "countryData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._locationData) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._crowdNotifierData) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.countryData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._locationData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._crowdNotifierData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.countryData.isEmpty {
      try visitor.visitSingularBytesField(value: self.countryData, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: QRCodePayload, rhs: QRCodePayload) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._locationData != rhs._locationData {return false}
    if lhs._crowdNotifierData != rhs._crowdNotifierData {return false}
    if lhs.countryData != rhs.countryData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TraceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TraceLocation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "description"),
    3: .same(proto: "address"),
    4: .same(proto: "startTimestamp"),
    5: .same(proto: "endTimestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.startTimestamp) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self.endTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 3)
    }
    if self.startTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.startTimestamp, fieldNumber: 4)
    }
    if self.endTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.endTimestamp, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TraceLocation, rhs: TraceLocation) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.address != rhs.address {return false}
    if lhs.startTimestamp != rhs.startTimestamp {return false}
    if lhs.endTimestamp != rhs.endTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CrowdNotifierData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CrowdNotifierData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "publicKey"),
    3: .same(proto: "cryptographicSeed"),
    4: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.publicKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.cryptographicSeed) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 2)
    }
    if !self.cryptographicSeed.isEmpty {
      try visitor.visitSingularBytesField(value: self.cryptographicSeed, fieldNumber: 3)
    }
    if self.type != 0 {
      try visitor.visitSingularUInt32Field(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CrowdNotifierData, rhs: CrowdNotifierData) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.cryptographicSeed != rhs.cryptographicSeed {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NMLocationData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "NMLocationData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "type"),
    3: .same(proto: "room"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.room) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if self.type != .other {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: NMLocationData, rhs: NMLocationData) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.type != rhs.type {return false}
    if lhs.room != rhs.room {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension NMLocationData.VenueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "MEETING_ROOM"),
    2: .same(proto: "CAFETERIA"),
    3: .same(proto: "PRIVATE_EVENT"),
    4: .same(proto: "CANTEEN"),
    5: .same(proto: "LIBRARY"),
    6: .same(proto: "LECTURE_ROOM"),
    7: .same(proto: "SHOP"),
    8: .same(proto: "GYM"),
    9: .same(proto: "KITCHEN_AREA"),
    10: .same(proto: "OFFICE_SPACE"),
  ]
}
