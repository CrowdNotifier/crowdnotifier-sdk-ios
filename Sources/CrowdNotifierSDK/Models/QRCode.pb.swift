// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: QRCode.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct QRCodeWrapper {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var publicKey: Data {
    get {return _publicKey ?? Data()}
    set {_publicKey = newValue}
  }
  /// Returns true if `publicKey` has been explicitly set.
  var hasPublicKey: Bool {return self._publicKey != nil}
  /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
  mutating func clearPublicKey() {self._publicKey = nil}

  var r1: Data {
    get {return _r1 ?? Data()}
    set {_r1 = newValue}
  }
  /// Returns true if `r1` has been explicitly set.
  var hasR1: Bool {return self._r1 != nil}
  /// Clears the value of `r1`. Subsequent reads from it will return its default value.
  mutating func clearR1() {self._r1 = nil}

  var content: QRCodeContent {
    get {return _content ?? QRCodeContent()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  mutating func clearContent() {self._content = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: Int32? = nil
  fileprivate var _publicKey: Data? = nil
  fileprivate var _r1: Data? = nil
  fileprivate var _content: QRCodeContent? = nil
}

struct QRCodeContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var location: String {
    get {return _location ?? String()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var room: String {
    get {return _room ?? String()}
    set {_room = newValue}
  }
  /// Returns true if `room` has been explicitly set.
  var hasRoom: Bool {return self._room != nil}
  /// Clears the value of `room`. Subsequent reads from it will return its default value.
  mutating func clearRoom() {self._room = nil}

  var venueType: QRCodeContent.VenueType {
    get {return _venueType ?? .other}
    set {_venueType = newValue}
  }
  /// Returns true if `venueType` has been explicitly set.
  var hasVenueType: Bool {return self._venueType != nil}
  /// Clears the value of `venueType`. Subsequent reads from it will return its default value.
  mutating func clearVenueType() {self._venueType = nil}

  var notificationKey: Data {
    get {return _notificationKey ?? Data()}
    set {_notificationKey = newValue}
  }
  /// Returns true if `notificationKey` has been explicitly set.
  var hasNotificationKey: Bool {return self._notificationKey != nil}
  /// Clears the value of `notificationKey`. Subsequent reads from it will return its default value.
  mutating func clearNotificationKey() {self._notificationKey = nil}

  var validFrom: UInt64 {
    get {return _validFrom ?? 0}
    set {_validFrom = newValue}
  }
  /// Returns true if `validFrom` has been explicitly set.
  var hasValidFrom: Bool {return self._validFrom != nil}
  /// Clears the value of `validFrom`. Subsequent reads from it will return its default value.
  mutating func clearValidFrom() {self._validFrom = nil}

  var validTo: UInt64 {
    get {return _validTo ?? 0}
    set {_validTo = newValue}
  }
  /// Returns true if `validTo` has been explicitly set.
  var hasValidTo: Bool {return self._validTo != nil}
  /// Clears the value of `validTo`. Subsequent reads from it will return its default value.
  mutating func clearValidTo() {self._validTo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum VenueType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case other // = 0
    case meetingRoom // = 1
    case cafeteria // = 2
    case privateEvent // = 3
    case canteen // = 4
    case library // = 5
    case lectureRoom // = 6
    case shop // = 7
    case gym // = 8
    case kitchenArea // = 9
    case officeSpace // = 10

    init() {
      self = .other
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .other
      case 1: self = .meetingRoom
      case 2: self = .cafeteria
      case 3: self = .privateEvent
      case 4: self = .canteen
      case 5: self = .library
      case 6: self = .lectureRoom
      case 7: self = .shop
      case 8: self = .gym
      case 9: self = .kitchenArea
      case 10: self = .officeSpace
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .other: return 0
      case .meetingRoom: return 1
      case .cafeteria: return 2
      case .privateEvent: return 3
      case .canteen: return 4
      case .library: return 5
      case .lectureRoom: return 6
      case .shop: return 7
      case .gym: return 8
      case .kitchenArea: return 9
      case .officeSpace: return 10
      }
    }

  }

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _location: String? = nil
  fileprivate var _room: String? = nil
  fileprivate var _venueType: QRCodeContent.VenueType? = nil
  fileprivate var _notificationKey: Data? = nil
  fileprivate var _validFrom: UInt64? = nil
  fileprivate var _validTo: UInt64? = nil
}

#if swift(>=4.2)

extension QRCodeContent.VenueType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension QRCodeWrapper: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QRCodeWrapper"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "publicKey"),
    3: .same(proto: "r1"),
    4: .same(proto: "content"),
  ]

  public var isInitialized: Bool {
    if self._version == nil {return false}
    if self._publicKey == nil {return false}
    if self._r1 == nil {return false}
    if self._content == nil {return false}
    if let v = self._content, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._version) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._publicKey) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._r1) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._content) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._publicKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._r1 {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._content {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: QRCodeWrapper, rhs: QRCodeWrapper) -> Bool {
    if lhs._version != rhs._version {return false}
    if lhs._publicKey != rhs._publicKey {return false}
    if lhs._r1 != rhs._r1 {return false}
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension QRCodeContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QRCodeContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "location"),
    3: .same(proto: "room"),
    4: .same(proto: "venueType"),
    5: .same(proto: "notificationKey"),
    6: .same(proto: "validFrom"),
    7: .same(proto: "validTo"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._location == nil {return false}
    if self._venueType == nil {return false}
    if self._notificationKey == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._location) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._room) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._venueType) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._notificationKey) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self._validFrom) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self._validTo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._location {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._room {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._venueType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._notificationKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._validFrom {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._validTo {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: QRCodeContent, rhs: QRCodeContent) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._location != rhs._location {return false}
    if lhs._room != rhs._room {return false}
    if lhs._venueType != rhs._venueType {return false}
    if lhs._notificationKey != rhs._notificationKey {return false}
    if lhs._validFrom != rhs._validFrom {return false}
    if lhs._validTo != rhs._validTo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension QRCodeContent.VenueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "MEETING_ROOM"),
    2: .same(proto: "CAFETERIA"),
    3: .same(proto: "PRIVATE_EVENT"),
    4: .same(proto: "CANTEEN"),
    5: .same(proto: "LIBRARY"),
    6: .same(proto: "LECTURE_ROOM"),
    7: .same(proto: "SHOP"),
    8: .same(proto: "GYM"),
    9: .same(proto: "KITCHEN_AREA"),
    10: .same(proto: "OFFICE_SPACE"),
  ]
}
