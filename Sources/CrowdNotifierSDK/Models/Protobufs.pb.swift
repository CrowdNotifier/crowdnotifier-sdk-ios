// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Protobufs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct QRCodeEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: UInt32 = 0

  var data: QRCodeContent {
    get {return _data ?? QRCodeContent()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var masterPublicKey: Data = Data()

  var entryProof: EntryProof {
    get {return _entryProof ?? EntryProof()}
    set {_entryProof = newValue}
  }
  /// Returns true if `entryProof` has been explicitly set.
  var hasEntryProof: Bool {return self._entryProof != nil}
  /// Clears the value of `entryProof`. Subsequent reads from it will return its default value.
  mutating func clearEntryProof() {self._entryProof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _data: QRCodeContent? = nil
  fileprivate var _entryProof: EntryProof? = nil
}

struct QRCodeContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var location: String = String()

  var room: String = String()

  var venueType: QRCodeContent.VenueType = .other

  var notificationKey: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum VenueType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case other // = 0
    case meetingRoom // = 1
    case cafeteria // = 2
    case privateEvent // = 3
    case canteen // = 4
    case library // = 5
    case lectureRoom // = 6
    case shop // = 7
    case gym // = 8
    case kitchenArea // = 9
    case officeSpace // = 10
    case UNRECOGNIZED(Int)

    init() {
      self = .other
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .other
      case 1: self = .meetingRoom
      case 2: self = .cafeteria
      case 3: self = .privateEvent
      case 4: self = .canteen
      case 5: self = .library
      case 6: self = .lectureRoom
      case 7: self = .shop
      case 8: self = .gym
      case 9: self = .kitchenArea
      case 10: self = .officeSpace
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .other: return 0
      case .meetingRoom: return 1
      case .cafeteria: return 2
      case .privateEvent: return 3
      case .canteen: return 4
      case .library: return 5
      case .lectureRoom: return 6
      case .shop: return 7
      case .gym: return 8
      case .kitchenArea: return 9
      case .officeSpace: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension QRCodeContent.VenueType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [QRCodeContent.VenueType] = [
    .other,
    .meetingRoom,
    .cafeteria,
    .privateEvent,
    .canteen,
    .library,
    .lectureRoom,
    .shop,
    .gym,
    .kitchenArea,
    .officeSpace,
  ]
}

#endif  // swift(>=4.2)

struct EntryProof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nonce1: Data = Data()

  var nonce2: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension QRCodeEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QRCodeEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "data"),
    3: .same(proto: "masterPublicKey"),
    4: .same(proto: "entryProof"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.masterPublicKey) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._entryProof) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.masterPublicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.masterPublicKey, fieldNumber: 3)
    }
    if let v = self._entryProof {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: QRCodeEntry, rhs: QRCodeEntry) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs._data != rhs._data {return false}
    if lhs.masterPublicKey != rhs.masterPublicKey {return false}
    if lhs._entryProof != rhs._entryProof {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension QRCodeContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "QRCodeContent"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "location"),
    3: .same(proto: "room"),
    4: .same(proto: "venueType"),
    5: .same(proto: "notificationKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.location) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.room) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.venueType) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.notificationKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if !self.room.isEmpty {
      try visitor.visitSingularStringField(value: self.room, fieldNumber: 3)
    }
    if self.venueType != .other {
      try visitor.visitSingularEnumField(value: self.venueType, fieldNumber: 4)
    }
    if !self.notificationKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.notificationKey, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: QRCodeContent, rhs: QRCodeContent) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.location != rhs.location {return false}
    if lhs.room != rhs.room {return false}
    if lhs.venueType != rhs.venueType {return false}
    if lhs.notificationKey != rhs.notificationKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension QRCodeContent.VenueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "MEETING_ROOM"),
    2: .same(proto: "CAFETERIA"),
    3: .same(proto: "PRIVATE_EVENT"),
    4: .same(proto: "CANTEEN"),
    5: .same(proto: "LIBRARY"),
    6: .same(proto: "LECTURE_ROOM"),
    7: .same(proto: "SHOP"),
    8: .same(proto: "GYM"),
    9: .same(proto: "KITCHEN_AREA"),
    10: .same(proto: "OFFICE_SPACE"),
  ]
}

extension EntryProof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "EntryProof"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce1"),
    2: .same(proto: "nonce2"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nonce1) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.nonce2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nonce1.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce1, fieldNumber: 1)
    }
    if !self.nonce2.isEmpty {
      try visitor.visitSingularBytesField(value: self.nonce2, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: EntryProof, rhs: EntryProof) -> Bool {
    if lhs.nonce1 != rhs.nonce1 {return false}
    if lhs.nonce2 != rhs.nonce2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
